@inject ISessionViewModel SessionViewModel
@inject IJSRuntime JSRuntime

@* <div class="d-inline-flex align-content-end align-items-end" > *@
<div class="d-flex justify-start flex-grow-1 gap-1">
    <MudText Class="mt-4 mr-1">Environment:</MudText>
    <MudText Class="mt-4 mr-3">@(SessionViewModel.HostEnvironment.Environment)</MudText>
    <MudText Class="mt-4 mr-1">Trace Id:</MudText>
    @* DisableUnderLine="true" *@
    <MudTextField T="string"
                  ReadOnly="true"
                  Class="mr-1 my-2"
                  Style="width: 330px; color: white;"
                  Margin="Margin.Dense"
                  Variant="Variant.Outlined"
                  UserAttributes="@TraceIdUserAttributes"
                  Value="@(SessionViewModel.TraceId.ToString())">
    </MudTextField>
    @* Title="Copy to Clipboard" *@
    <MudTooltip Text="Copy to Clipboard"
                Arrow="true"
                Placement="Placement.Right">
        <MudIconButton Icon="@Icons.Material.Filled.FileCopy"
                       Color="Color.Inherit"
                       OnClick="@(_ => JSRuntime.CopyToClipboard("TraceIdTextBox"))">
        </MudIconButton>
    </MudTooltip>
    @* Title="Generate new Id" *@
    <MudTooltip Text="Generate new Id">
        <MudIconButton Icon="@Icons.Material.Filled.InsertDriveFile"
                       Color="Color.Inherit"
                       OnClick="@(_ => SessionViewModel.NewTraceId())">
        </MudIconButton>
    </MudTooltip>
    <MudSwitch T="bool" Class="mt-3" Value="@SessionViewModel.IsDarkMode" ValueChanged="@((bool isChecked) => DarkModeSwitchChanged(isChecked))" Label="Dark" />
    @* <MudSwitch T="bool" Class="mt-3" Checked="@SessionViewModel.IsDarkMode" CheckedChanged="@((bool isChecked) => DarkModeSwitchChanged(isChecked))" Label="Dark" /> *@
</div>

@code {

    public void Dispose() =>
        SessionViewModel.StateHasChangedEvent -= SessionViewModel_StateHasChangedEvent;

    Dictionary<string, object> TraceIdUserAttributes = new Dictionary<string, object> { { "Id", "TraceIdTextBox" } };

    protected override async Task OnInitializedAsync()
    {
        SessionViewModel.StateHasChangedEvent += SessionViewModel_StateHasChangedEvent;

        base.OnInitialized();

        SessionViewModel.SetDarkMode(await JSRuntime.PrefersDarkMode());
    }

    protected void DarkModeSwitchChanged(bool isChecked) =>
        SessionViewModel.SetDarkMode(isChecked);

    protected void SessionViewModel_StateHasChangedEvent(object sender, EventArgs e) =>
        StateHasChanged();

}


@page "/"
@implements IDisposable
@inject ISessionViewModel SessionViewModel
@inject IIntroductionSearchViewModel IntroductionSearchViewModel
@inject ILogger<IndexPage> Logger
@inject ISnackbar Snackbar

<div class="row mb-3">
    <ApiResultMessagesComponent ApiResultMessages="@IntroductionSearchViewModel.ApiResultMessages" />
</div>
@if (IntroductionSearchViewModel.IsBusy)
{
    <div class="d-flex justify-center mud-alert mud-alert-text-info">
        <h3>Searching... please wait</h3>
    </div>
}
else
{
    @if (IntroductionSearchViewModel.HasSearched)
    {
        <MudTable @ref="@_mudTable"
                  T="IntroductionSearchResultDto"
                  Items="@(IntroductionSearchViewModel.IntroductionSearchResult.Data)"
                  Hover="true"
                  Bordered="true"
                  Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Recipe(s)</MudText>
                <MudSpacer />
                <MudTextField T="string"
                              Placeholder="Filter"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="text-align: center">Title</MudTh>
                <MudTh Style="text-align: center; width: 10%">Ingredients</MudTh>
                <MudTh Style="text-align: center; width: 10%">Instructions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">
                    <a class="nav-link"
                       aria-current="page"
                       href="@($"/Details/{@context.Id.ToString()}")">
                        @context.Title
                    </a>
                </MudTd>
                @*<MudTd DataLabel="Title">@context.Title</MudTd>*@
                <MudTd DataLabel="Ingredients" Style="text-align: right">@context.IngredientsCount</MudTd>
                <MudTd DataLabel="Instructions" Style="text-align: right">@context.InstructionsCount</MudTd>
            </RowTemplate>
            <PagerContent>
                @* <MudTablePager /> *@
                <div class="d-flex align-center flex-grow-1 gap-4" >
                    <MudPagination Selected="@(IntroductionSearchViewModel.FilteredIntroductionSearchResult.Meta.PageNumber)"
                                   SelectedChanged="@((int pageNumber) => SearchAsync(pageNumber))"
                                   Count="@(Math.Min(IntroductionSearchViewModel.FilteredIntroductionSearchResult.Meta.PageCount, 10))"
                                   Class="d-flex py-5 "  />
                    <MudText Class="d-flex py-5"
                             Align="Align.Left">@PaginationText</MudText>
                </div>
            </PagerContent>
        </MudTable>
    }
    else
    {
        <div class="mud-paper d-flex justify-center">
            <h3>Welcome to the Recipe App</h3>
        </div>
        <div class="mud-paper d-flex justify-center mb-3">
            <p>Input a search term and click Search</p>
        </div>
    }
}


@code {

    public void Dispose() =>
        IntroductionSearchViewModel.StateHasChangedEvent -= IntroductionSearchViewModel_StateHasChangedEvent;

    protected string PageName = nameof(IndexPage);

    protected MudTable<IntroductionSearchResultDto> _mudTable;

    protected string PaginationText =>
        $"Page {IntroductionSearchViewModel.FilteredIntroductionSearchResult.Meta.PageNumber} of {Math.Min(IntroductionSearchViewModel.FilteredIntroductionSearchResult.Meta.PageCount, 10)}; Total Items: {IntroductionSearchViewModel.FilteredIntroductionSearchResult.Meta.TotalItemCount}";

    protected override async Task OnInitializedAsync()
    {
        IntroductionSearchViewModel.StateHasChangedEvent += IntroductionSearchViewModel_StateHasChangedEvent;
        if (IntroductionSearchViewModel.HasSearched)
            await SearchAsync(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageNumber, IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageSize);

        await base.OnInitializedAsync();
    }

    protected void IntroductionSearchViewModel_StateHasChangedEvent(object sender, EventArgs e) =>
        StateHasChanged();

    protected async Task SearchAsync(int pageNumber = 1, int pageSize = 10)
    {
        try
        {
            Logger.LogInformation($"{nameof(SearchAsync)}({pageNumber}, {pageSize})");

            IntroductionSearchViewModel.SetBusyFlag(true);
            await IntroductionSearchViewModel.SearchAsync(pageNumber, pageSize);
            _mudTable.NavigateTo(pageNumber - 1);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, IntroductionSearchViewModel.ApiResultMessages, PageName);
        }
        finally
        {
            IntroductionSearchViewModel.SetBusyFlag(false);
        }
    }

    /*
    @*<MudTable Items="@(IntroductionSearchViewModel.IntroductionSearchResult.Data)"
                  Hover="true"
                  Bordered="true"
                  Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Recipe(s)</MudText>
                <MudSpacer />
                <MudTextField T="string"
                              Placeholder="Filter"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>Ingredients</MudTh>
                <MudTh>Instructions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Ingredients">@context.IngredientsCount</MudTd>
                <MudTd DataLabel="Instructions">@context.InstructionsCount</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>*@
    */

}
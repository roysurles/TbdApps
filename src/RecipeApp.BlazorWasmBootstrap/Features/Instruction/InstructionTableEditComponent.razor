@inject ISessionViewModel SessionViewModel
@inject IJSRuntime JSRuntime
@inject ILogger<InstructionTableEditComponent> Logger


@if (InstructionViewModel is not null)
{
@*     <div class="row">
        <ApiResultMessagesComponent ApiResultMessages="@InstructionViewModel.ApiResultMessages" />
    </div> *@

    <div class="row">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">
                        <button type="button"
                                class="btn btn-primary btn-sm mr-3"
                                title="Add Instruction"
                                @onclick="@AddInstructionAsync">
                            <i class="fas fa-plus"></i>
                        </button>
                        @* disabled="@(InstructionViewModel.IsIntroductionNew)" *@
                        <ApiResultMessagesModalComponent ApiResultMessages="@InstructionViewModel.ApiResultMessages" />
                    </th>
                    <th scope="col">Description</th>
                    <th scope="col">Reposition</th>
                    @*<th scope="col">SortOrder</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var item in InstructionViewModel.Instructions)
                {
                    <tr>
                        <td>
                            <button type="button"
                                    class="btn btn-primary btn-sm ml-2"
                                    title="Save Instruction"
                                    @onclick="@(() => SaveInstructionAsync(item))">
                                <i class="fas fa-save"></i>
                            </button>
                            <button type="button"
                                    class="btn btn-secondary btn-sm"
                                    title="Delete Instruction"
                                    @onclick="@(() => DeleteInstructionAsync(item))">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                            @* disabled="@(item.IsNew)" *@
                        </td>
                        <td>
                            <input type="text"
                                   class="form-control-sm w-100"
                                   @bind-value="@(item.Description)">
                        </td>
                        <td class="align-middle">
                            <RepositionItemComponent Item="@item"
                                                     IsMoveFirstDisabled="@(item.IsNew || InstructionViewModel.IsBusy)"
                                                     IsMoveUpDisabled="@(item.IsNew || InstructionViewModel.IsBusy)"
                                                     IsMoveDownDisabled="@(item.IsNew || InstructionViewModel.IsBusy)"
                                                     IsMoveLastDisabled="@(item.IsNew || InstructionViewModel.IsBusy)"
                                                     OnMoveFirstClick="@((InstructionDto dto) => MoveInstructionAsync(dto, _ => InstructionViewModel.MoveInstructionFirstAsync(dto)))"
                                                     OnMoveUpClick="@((InstructionDto dto) => MoveInstructionAsync(dto, _ => InstructionViewModel.MoveInstructionUpAsync(dto)))"
                                                     OnMoveDownClick="@((InstructionDto dto) => MoveInstructionAsync(dto, _ => InstructionViewModel.MoveInstructionDownAsync(dto)))"
                                                     OnMoveLastClick="@((InstructionDto dto) => MoveInstructionAsync(dto, _ => InstructionViewModel.MoveInstructionLastAsync(dto)))" />
                        </td>
@*                        <td>
                            <input type="text"
                                   class="form-control-sm w-100"
                                   Value="@(item.SortOrder)">
                        </td>*@
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public IInstructionViewModel InstructionViewModel { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    protected string ComponentName = nameof(InstructionTableEditComponent);

    protected async Task AddInstructionAsync()
    {
        try
        {
            Logger.LogInformation($"{nameof(AddInstructionAsync)}()");

            if (InstructionViewModel.IsIntroductionNew)
            {
                await JSRuntime.AlertAsync("Save introduction, before adding instructions.");
                return;
            }

            if (InstructionViewModel.Instructions.Any(x => x.IsNew))
            {
                await JSRuntime.AlertAsync("Save unsaved instruction before adding another.");
                return;
            }

            InstructionViewModel.IsBusy = true;
            InstructionViewModel.AddInstruction();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            InstructionViewModel.SetIsBusyFlag(false, () => OnStateHasChanged.InvokeAsync());
        }
    }

    protected async Task SaveInstructionAsync(InstructionDto instructionDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(SaveInstructionAsync)}({nameof(instructionDto)})");

            InstructionViewModel.IsBusy = true;
            await InstructionViewModel.SaveInstructionAsync(instructionDto);
            var errorMessages = InstructionViewModel.ApiResultMessages.Where(m => m.MessageType == ApiResultMessageModelTypeEnumeration.Error);
            if (errorMessages.Any())
            {
                foreach (var errorMessage in errorMessages)
                    await JSRuntime.ToastAsync(new ToastModel(ToastType.error, "Instruction", errorMessage.Message));

                return;
            }

            await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Saved successfully!"));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            await InstructionViewModel.SetIsBusyFlagAsync(false, OnStateHasChanged);
        }
    }

    protected async Task DeleteInstructionAsync(InstructionDto instructionDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(DeleteInstructionAsync)}({nameof(instructionDto)})");

            InstructionViewModel.ClearApiResultMessages();

            if (await JSRuntime.ConfirmAsync($"Are you sure you want to delete this instruction?") == false)
                return;

            InstructionViewModel.IsBusy = true;
            await InstructionViewModel.DeleteInstructionAsync(instructionDto);
            var errorMessages = InstructionViewModel.ApiResultMessages.Where(m => m.MessageType == ApiResultMessageModelTypeEnumeration.Error);
            if (errorMessages.Any())
            {
                foreach (var errorMessage in errorMessages)
                    await JSRuntime.ToastAsync(new ToastModel(ToastType.error, "Instruction", errorMessage.Message));

                return;
            }

            await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Deleted successfully!"));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            await InstructionViewModel.SetIsBusyFlagAsync(false, OnStateHasChanged);
        }
    }

    protected async Task MoveInstructionAsync(InstructionDto instructionDto
        , Expression<Func<InstructionDto, Task<IInstructionViewModel>>> expression)
    {
        try
        {
            // https://stackoverflow.com/questions/1495465/get-name-of-action-func-delegate
            // https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/expression-trees-execution
            Logger.LogInformation("{MoveInstructionAsync}({instructionDto}) for: {ActualMethodName}"
                , nameof(MoveInstructionAsync), nameof(instructionDto), ((MethodCallExpression)expression.Body).Method.Name.ToString());

            InstructionViewModel.IsBusy = true;
            var func = expression.Compile();
            await func(instructionDto);

            if (InstructionViewModel.ApiResultMessages.Any().Equals(false))
            {
                await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Moved successfully!"));
                return;
            }

            foreach (var apiResultMessage in InstructionViewModel.ApiResultMessages)
                await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Instruction", apiResultMessage.Message));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            await InstructionViewModel.SetIsBusyFlagAsync(false, OnStateHasChanged);
        }
    }

    // protected async Task MoveInstructionFirstAsync(InstructionDto instructionDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveInstructionFirstAsync}({InstructionDto})", nameof(MoveInstructionFirstAsync), nameof(InstructionDto));

    //         InstructionViewModel.IsBusy = true;
    //         await InstructionViewModel.MoveInstructionFirstAsync(instructionDto);

    //         if (InstructionViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in InstructionViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Instruction", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         InstructionViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

    // protected async Task MoveInstructionPreviousAsync(InstructionDto instructionDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveInstructionPreviousAsync}({InstructionDto})", nameof(MoveInstructionPreviousAsync), nameof(InstructionDto));

    //         InstructionViewModel.IsBusy = true;
    //         await InstructionViewModel.MoveInstructionUpAsync(instructionDto);

    //         if (InstructionViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in InstructionViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Instruction", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         InstructionViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

    // protected async Task MoveInstructionNextAsync(InstructionDto instructionDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveInstructionNextAsync}({InstructionDto})", nameof(MoveInstructionNextAsync), nameof(InstructionDto));

    //         InstructionViewModel.IsBusy = true;
    //         await InstructionViewModel.MoveInstructionDownAsync(instructionDto);

    //         if (InstructionViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in InstructionViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Instruction", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         InstructionViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

    // protected async Task MoveInstructionLastAsync(InstructionDto instructionDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveInstructionLastAsync}({InstructionDto})", nameof(MoveInstructionLastAsync), nameof(InstructionDto));

    //         InstructionViewModel.IsBusy = true;
    //         await InstructionViewModel.MoveInstructionLastAsync(instructionDto);

    //         if (InstructionViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Instruction", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in InstructionViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Instruction", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         InstructionViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

}

@inject ISessionViewModel SessionViewModel
@inject IJSRuntime JSRuntime
@inject ILogger<IngredientTableEditComponent> Logger


@if (InstructionViewModel is not null)
{
    <div class="row">
        <ApiResultMessagesComponent ApiResultMessages="@InstructionViewModel.ApiResultMessages" />
    </div>

    <div class="row">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                title="Add Instruction"
                                disabled="@(InstructionViewModel.IsIntroductionNew)"
                                @onclick="@AddInstruction">
                            <i class="fas fa-plus"></i>
                        </button>
                    </th>
                    <th scope="col">Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in InstructionViewModel.Instructions)
                {
                    <tr>
                        <td>
                            <button type="button"
                                    class="btn btn-primary btn-sm ml-2"
                                    title="Save Instruction"
                                    @onclick="@(() => SaveInstructionAsync(item))">
                                <i class="fas fa-save"></i>
                            </button>
                            <button type="button"
                                    class="btn btn-primary btn-sm"
                                    title="Delete Instruction"
                                    disabled="@(item.IsNew)"
                                    @onclick="@(() => DeleteInstructionAsync(item))">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                        <td>
                            <input type="text"
                                   class="form-control-sm w-100"
                                   @bind-value="@(item.Description)">
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public IInstructionViewModel InstructionViewModel { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    protected string ComponentName = nameof(InstructionTableEditComponent);

    protected void AddInstruction()
    {
        try
        {
            Logger.LogInformation($"{nameof(AddInstruction)}()");

            InstructionViewModel.IsBusy = true;
            InstructionViewModel.AddInstruction();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            InstructionViewModel.IsBusy = false;
            OnStateHasChanged.InvokeAsync();
        }
    }

    protected async Task SaveInstructionAsync(InstructionDto instructionDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(SaveInstructionAsync)}({nameof(instructionDto)})");

            InstructionViewModel.IsBusy = true;
            await InstructionViewModel.SaveInstructionAsync(instructionDto);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            InstructionViewModel.IsBusy = false;
            await OnStateHasChanged.InvokeAsync();
        }
    }

    protected async Task DeleteInstructionAsync(InstructionDto instructionDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(DeleteInstructionAsync)}({nameof(instructionDto)})");

            InstructionViewModel.ClearApiResultMessages();

            if (await JSRuntime.ConfirmAsync($"Are you sure you want to delete this instruction?") == false)
                return;

            InstructionViewModel.IsBusy = true;
            await InstructionViewModel.DeleteInstructionAsync(instructionDto);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, InstructionViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            InstructionViewModel.IsBusy = false;
            await OnStateHasChanged.InvokeAsync();
        }
    }

}

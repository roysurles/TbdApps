
@page "/"
@implements IDisposable
@inject ISessionViewModel SessionViewModel
@inject IIntroductionSearchViewModel IntroductionSearchViewModel
@inject ILogger<IndexPage> Logger

<div class="row mb-3">
    <ApiResultMessagesComponent ApiResultMessages="@IntroductionSearchViewModel.ApiResultMessages" />
</div>

@if (IntroductionSearchViewModel.IsBusy)
{
    <div class="row text-center text-primary">
        <h3>Searching... please wait</h3>
    </div>
}
else
{
    @if (IntroductionSearchViewModel.HasSearched)
    {
        <div class="row">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th style="width:80%">Title</th>
                        <th style="width:10%">Ingredients</th>
                        <th style="width:10%">Instructions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in IntroductionSearchViewModel.IntroductionSearchResult.Data)
                    {
                        var itemId = item.Id.ToString();
                        var detailLink = $"/Details/{itemId}";
                        <tr title="@(item.Comment)">
                            <td>
                                <a class="nav-link"
                                   aria-current="page"
                                   href="@detailLink">
                                    @item.Title
                                </a>
                            </td>
                            <td class="text-center">
                                <span class="badge bg-info text-dark">@(item.IngredientsCount)</span>
                            </td>
                            <td class="text-center">
                                <span class="badge bg-info text-dark">@(item.InstructionsCount)</span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageCount > 1)
        {
            <div class="row">
                <PaginationComponent PageCount="@(Math.Min(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageCount, 10))"
                                     PageNumber="@(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageNumber)"
                                     PageNumberClicked="@((int pageNumber) => SearchAsync(pageNumber))" />
            </div>
        }
    }
    else
    {
        <div class="row text-center mb-3">
            <h3>Welcome to the Recipe App</h3>
            <p>Input a search term and click Search</p>
        </div>
    }
}

@code {

    public void Dispose() =>
        IntroductionSearchViewModel.StateHasChangedEvent -= IntroductionSearchViewModel_StateHasChangedEvent;

    protected string PageName = nameof(IndexPage);

    protected override async Task OnInitializedAsync()
    {
        IntroductionSearchViewModel.StateHasChangedEvent += IntroductionSearchViewModel_StateHasChangedEvent;
        if (IntroductionSearchViewModel.HasSearched)
            await SearchAsync(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageNumber, IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageSize);

        await base.OnInitializedAsync();
    }

    protected void IntroductionSearchViewModel_StateHasChangedEvent(object sender, EventArgs e) =>
        StateHasChanged();

    protected async Task SearchAsync(int pageNumber = 1, int pageSize = 10)
    {
        try
        {
            Logger.LogInformation($"{nameof(SearchAsync)}({pageNumber}, {pageSize})");

            IntroductionSearchViewModel.SetBusyFlag(true);
            await IntroductionSearchViewModel.SearchAsync(pageNumber, pageSize);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(IntroductionSearchViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            IntroductionSearchViewModel.SetBusyFlag(false);
        }
    }

}

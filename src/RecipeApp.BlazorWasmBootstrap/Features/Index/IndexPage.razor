
@page "/"
@implements IDisposable
@inject ISessionViewModel SessionViewModel
@inject IIntroductionSearchViewModel IntroductionSearchViewModel
@inject ILogger<IndexPage> Logger

<div class="row mb-3">
    <ApiResultMessagesComponent ApiResultMessages="@IntroductionSearchViewModel.ApiResultMessages" />
</div>

@if (IntroductionSearchViewModel.IsBusy)
{
    <div class="row text-center text-primary">
        <h3>Searching... please wait</h3>
    </div>
}
else
{
    @if (IntroductionSearchViewModel.HasSearched)
    {
        <div class="row">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Title</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in IntroductionSearchViewModel.IntroductionSearchResult.Data)
                    {
                        var itemId = item.Id.ToString();
                        var detailLink = $"/Details/{itemId}";
                        <tr title="@(item.Comment)">
                            <td>
                                <span>
                                    <a class="nav-link active"
                                       aria-current="page"
                                       href="@detailLink">
                                        @item.Title
                                    </a>
                                    <span>
                                        <span class="badge bg-info text-dark">Ingredients: @(item.IngredientsCount)</span>
                                    </span>
                                    <span>

                                        <span class="badge bg-info text-dark">Instructions: @(item.InstructionsCount)</span>
                                    </span>
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageCount > 1)
        {
            <div class="row">
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item @(IntroductionSearchViewModel.IntroductionSearchResult.Meta.HasPreviousPage.Equals(false).RenderDisabled())">
                            <a class="page-link" href="#" @onclick="@(_ => SearchAsync(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageNumber - 1))">
                                Previous
                            </a>
                        </li>
                        @for (int i = 0; i < Math.Min(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageCount, 10); i++)
                        {
                            var pageNumber = i + 1;
                            var active = pageNumber.Equals(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageNumber)
                                ? "active"
                                : "";
                            <li class="page-item @active">
                                <a class="page-link" href="#" @onclick="@(_ => SearchAsync(pageNumber))">
                                    @(pageNumber)
                                </a>
                            </li>
                        }
                        <li class="page-item @(IntroductionSearchViewModel.IntroductionSearchResult.Meta.HasNextPage.Equals(false).RenderDisabled())">
                            <a class="page-link" href="#" @onclick="@(_ => SearchAsync(IntroductionSearchViewModel.IntroductionSearchResult.Meta.PageNumber + 1))">
                                Next
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
    else
    {
        <div class="row text-center mb-3">
            <h3>Welcome to the Recipe App</h3>
            <p>Input a search term and click Search</p>
        </div>
    }
}

@code {

    public void Dispose() =>
        IntroductionSearchViewModel.StateHasChangedEvent -= IntroductionSearchViewModel_StateHasChangedEvent;

    protected string PageName = nameof(IndexPage);

    protected override void OnInitialized()
    {
        IntroductionSearchViewModel.StateHasChangedEvent += IntroductionSearchViewModel_StateHasChangedEvent;

        base.OnInitialized();
    }

    protected void IntroductionSearchViewModel_StateHasChangedEvent(object sender, EventArgs e) =>
        StateHasChanged();

    protected async Task SearchAsync(int pageNumber = 1, int pageSize = 10)
    {
        try
        {
            Logger.LogInformation($"{nameof(SearchAsync)}({pageNumber}, {pageSize})");

            IntroductionSearchViewModel.SetBusyFlag(true);
            await IntroductionSearchViewModel.SearchAsync(pageNumber, pageSize);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(IntroductionSearchViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            IntroductionSearchViewModel.SetBusyFlag(false);
        }
    }

}

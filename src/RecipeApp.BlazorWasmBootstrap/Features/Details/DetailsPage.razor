@page "/Details"
@page "/Details/{IntoductionId}"
@inject ISessionViewModel SessionViewModel
@inject IDetailsPageViewModel DetailsPageViewModel
@inject ILogger<DetailsPage> Logger

<h3>Details</h3>

@if (DetailsPageViewModel.IsLoading)
{
    //Need spinner / Progress bar
    <div class="row mt-3 mb-3 text-center">
        <i>Loading...</i>
    </div>
}
else
{
    <div class="row mt-3 mb-3">
        <ApiResultMessagesComponent ApiResultMessages="@DetailsPageViewModel.ApiResultMessages" />
    </div>

    <div class="row mb-3">
        <div class="accordion" id="accordionPanelsStayOpenExample">
            <div class="accordion-item" title="@(DetailsPageViewModel.Introduction.Title)">
                <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                        <h3>Introduction</h3>
                    </button>
                </h2>
                <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                    <div class="accordion-body">
                        <div class="form-floating mb-3">
                            <input type="text"
                                   class="form-control"
                                   id="IntroductionTitleInput"
                                   placeholder="Title"
                                   @bind-value="@(DetailsPageViewModel.Introduction.Title)">
                            <label for="IntroductionTitleInput">Title</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text"
                                   class="form-control"
                                   id="IntroductionCommentsInput"
                                   placeholder="Comments"
                                   @bind-value="@(DetailsPageViewModel.Introduction.Comment)">
                            <label for="IntroductionCommentsInput">Comments</label>
                        </div>
                        <div>
                            <button type="button"
                                    class="btn btn-primary btn-sm"
                                    title="Save Introduction"
                                    @onclick="@SaveIntroductionAsync"
                                    disabled="@(DetailsPageViewModel.IsValidIntroductionIdParameter.Equals(false))">
                                <i class="fas fa-save"></i>
                                Save Introduction
                            </button>
                            <button type="button"
                                    class="btn btn-primary btn-sm ml-3"
                                    title="Delete Introduction and associated Ingredients & Instructions"
                                    @onclick="@DeleteIntroductionAsync"
                                    disabled="@(DetailsPageViewModel.Introduction?.IsNew)">
                                <i class="fas fa-trash-alt"></i>
                                Delete Introduction
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                        <span>
                            <h3>Ingredients</h3>
                            <span class="badge bg-info text-dark">@(DetailsPageViewModel.Ingredients.Count)</span>
                        </span>
                    </button>
                </h2>
                <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
                    <div class="accordion-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">
                                        <button type="button"
                                                class="btn btn-primary btn-sm"
                                                title="Add Ingredient"
                                                disabled="@(DetailsPageViewModel.Introduction.IsNew)"
                                                @onclick="@AddIngredient">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </th>
                                    <th scope="col">Measurement</th>
                                    <th scope="col">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in DetailsPageViewModel.Ingredients)
                                {

                                    <tr>
                                        <td>
                                            <button type="button"
                                                    class="btn btn-primary btn-sm ml-2"
                                                    title="Save Ingredient"
                                                    @onclick="@(() => SaveIngredientAsync(item))">
                                                <i class="fas fa-save"></i>
                                            </button>
                                            <button type="button"
                                                    class="btn btn-primary btn-sm"
                                                    title="Delete Ingredient"
                                                    disabled="@(item.IsNew)"
                                                    @onclick="@(() => DeleteIngredientAsync(item))">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                        <td>
                                            <input type="text"
                                                   class="form-control-sm w-100"
                                                   @bind-value="@(item.Measurement)">
                                        </td>
                                        <td>
                                            <input type="text"
                                                   class="form-control-sm w-100"
                                                   @bind-value="@(item.Description)">
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header" id="panelsStayOpen-headingThree">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">
                        <span>
                            <h3>Instructions</h3>
                            <span class="badge bg-info text-dark">@(DetailsPageViewModel.Instructions.Count)</span>
                        </span>
                    </button>
                </h2>
                <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingThree">
                    <div class="accordion-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">
                                        <button type="button"
                                                class="btn btn-primary btn-sm"
                                                title="Add Instruction"
                                                disabled="@(DetailsPageViewModel.Introduction.IsNew)"
                                                @onclick="@AddInstruction">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </th>
                                    <th scope="col">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in DetailsPageViewModel.Instructions)
                                {
                                    <tr>
                                        <td>
                                            <button type="button"
                                                    class="btn btn-primary btn-sm ml-2"
                                                    title="Save Instruction"
                                                    @onclick="@(() => SaveInstructionAsync(item))">
                                                <i class="fas fa-save"></i>
                                            </button>
                                            <button type="button"
                                                    class="btn btn-primary btn-sm"
                                                    title="Delete Instruction"
                                                    disabled="@(item.IsNew)"
                                                    @onclick="@(() => DeleteInstructionAsync(item))">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                        <td>
                                            <input type="text"
                                                   class="form-control-sm w-100"
                                                   @bind-value="@(item.Description)">
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string IntoductionId { get; set; }

    protected string PageName = nameof(DetailsPage);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation($"{nameof(OnInitializedAsync)}({IntoductionId})");

            DetailsPageViewModel.IsLoading = true;
            await DetailsPageViewModel.InitializeAsync(IntoductionId);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsLoading = false;
            await base.OnInitializedAsync();
        }
    }

    protected async Task SaveIntroductionAsync()
    {
        try
        {
            Logger.LogInformation($"{nameof(SaveIntroductionAsync)}()");

            DetailsPageViewModel.IsBusy = true;
            await DetailsPageViewModel.SaveIntroductionAsync();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected async Task DeleteIntroductionAsync()
    {
        try
        {
            Logger.LogInformation($"{nameof(DeleteIntroductionAsync)}()");

            // TODO:  need snackbar or stacked alerts
            if (DetailsPageViewModel.Introduction.IsNew)
            {
                DetailsPageViewModel.AddInformationMessage("There is nothing to Delete!", $"{nameof(DetailsPageViewModel)}.{nameof(DeleteIntroductionAsync)}");
                await SessionViewModel.JSRuntime.AlertAsync("There is nothing to delete!");
                return;
            }

            if (await SessionViewModel.JSRuntime.ConfirmAsync($"Are you sure you want to delete '{DetailsPageViewModel.Introduction?.Title}'?") == false)
                return;

            DetailsPageViewModel.IsBusy = true;
            await DetailsPageViewModel.DeleteIntroductionAsync();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected void AddIngredient()
    {
        try
        {
            Logger.LogInformation($"{nameof(AddIngredient)}()");

            DetailsPageViewModel.IsBusy = true;
            DetailsPageViewModel.AddIngredient();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected async Task SaveIngredientAsync(IngredientDto ingredientDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(SaveIntroductionAsync)}({nameof(ingredientDto)})");

            DetailsPageViewModel.IsBusy = true;
            await DetailsPageViewModel.SaveIngredientAsync(ingredientDto);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected async Task DeleteIngredientAsync(IngredientDto ingredientDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(DeleteIngredientAsync)}({nameof(ingredientDto)})");

            DetailsPageViewModel.ClearApiResultMessages();

            if (await SessionViewModel.JSRuntime.ConfirmAsync($"Are you sure you want to delete this ingredient?") == false)
                return;

            DetailsPageViewModel.IsBusy = true;
            await DetailsPageViewModel.DeleteIngredientAsync(ingredientDto);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected void AddInstruction()
    {
        try
        {
            Logger.LogInformation($"{nameof(AddInstruction)}()");

            DetailsPageViewModel.IsBusy = true;
            DetailsPageViewModel.AddInstruction();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected async Task SaveInstructionAsync(InstructionDto instructionDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(SaveInstructionAsync)}({nameof(instructionDto)})");

            DetailsPageViewModel.IsBusy = true;
            await DetailsPageViewModel.SaveInstructionAsync(instructionDto);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected async Task DeleteInstructionAsync(InstructionDto instructionDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(DeleteInstructionAsync)}({nameof(instructionDto)})");

            DetailsPageViewModel.ClearApiResultMessages();

            if (await SessionViewModel.JSRuntime.ConfirmAsync($"Are you sure you want to delete this instruction?") == false)
                return;

            DetailsPageViewModel.IsBusy = true;
            await DetailsPageViewModel.DeleteInstructionAsync(instructionDto);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(DetailsPageViewModel.ApiResultMessages, ex, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }
}

@page "/Details"
@page "/Details/{IntroductionId}"
@inject ISessionViewModel SessionViewModel
@inject IDetailsPageViewModel DetailsPageViewModel
@inject ILogger<DetailsPage> Logger

<PageTitle>RecipeApp - Details</PageTitle>
<div class="row mb-3"></div>
<div class="row "> @*mt-5*@
    <h3>Details</h3>
</div>

@if (DetailsPageViewModel.IsLoading)
{
    //Need spinner / Progress bar
    <div class="row mt-3 mb-3 text-center">
        <i>Loading...</i>
    </div>
}
else
{
    <div class="row mt-3 mb-3">
        <div class="col">
            <ApiResultMessagesComponent ApiResultMessages="@DetailsPageViewModel.ApiResultMessages" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <div class="accordion" id="accordionPanelsStayOpenExample">
                <div class="accordion-item" title="@(DetailsPageViewModel.IntroductionViewModel.Introduction.Title)">
                    <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                            <span style="font-size:larger"><strong>Introduction</strong></span>
                        </button>
                    </h2>
                    <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                        <div class="accordion-body">
                            <IntroductionEditComponent IntroductionViewModel="@(DetailsPageViewModel.IntroductionViewModel)"
                                                       OnIntroductionSaved="@OnIntroductionSavedAsync"
                                                       OnIntroductionDeleted="@OnIntroductionDeletedAsync" />
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                            <span>
                                <span style="font-size:larger"><strong>Ingredients</strong></span>
                                <span class="badge bg-info text-dark">@(DetailsPageViewModel.IngredientViewModel.Ingredients.Count)</span>
                            </span>
                        </button>
                    </h2>
                    <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
                        <div class="accordion-body">
                            <IngredientTableEditComponent IngredientViewModel="@(DetailsPageViewModel.IngredientViewModel)"
                                                          OnStateHasChanged="@ChildComponentStateHasChanged" />
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="panelsStayOpen-headingThree">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">
                            <span>
                                <span style="font-size:larger"><strong>Instructions</strong></span>
                                <span class="badge bg-info text-dark">@(DetailsPageViewModel.InstructionViewModel.Instructions.Count)</span>
                            </span>
                        </button>
                    </h2>
                    <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingThree">
                        <div class="accordion-body">
                            <InstructionTableEditComponent InstructionViewModel="@(DetailsPageViewModel.InstructionViewModel)"
                                                           OnStateHasChanged="@ChildComponentStateHasChanged" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <button class="btn btn-secondary"
                    onclick="history.back()">
                Back
            </button>
        </div>
    </div>
}

@code {

    [Parameter]
    public string IntroductionId { get; set; }

    protected string PageName = nameof(DetailsPage);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation($"{nameof(OnInitializedAsync)}({IntroductionId})");

            DetailsPageViewModel.IsLoading = true;
            await DetailsPageViewModel.InitializeAsync(IntroductionId.ToGuid());
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, DetailsPageViewModel.ApiResultMessages, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsLoading = false;
            await base.OnInitializedAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation($"{nameof(OnParametersSet)}({IntroductionId})");
        base.OnParametersSet();
        await OnInitializedAsync();
    }

    protected async Task OnIntroductionSavedAsync(bool wasNew)
    {
        try
        {
            Logger.LogInformation($"{nameof(OnIntroductionSavedAsync)}({wasNew})");

            DetailsPageViewModel.IsBusy = true;
            if (wasNew)
            {
                IntroductionId = DetailsPageViewModel.IntroductionViewModel.Introduction.Id.ToString();
                await DetailsPageViewModel.InitializeIngredientsAndInstructionsAsync(DetailsPageViewModel.IntroductionViewModel.Introduction.Id);
            }
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, DetailsPageViewModel.ApiResultMessages, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected async Task OnIntroductionDeletedAsync()
    {
        try
        {
            Logger.LogInformation($"{nameof(OnIntroductionDeletedAsync)}()");

            DetailsPageViewModel.IsBusy = true;
            IntroductionId = null;
            await DetailsPageViewModel.InitializeIngredientsAndInstructionsAsync(Guid.Empty);
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, DetailsPageViewModel.ApiResultMessages, PageName);
        }
        finally
        {
            DetailsPageViewModel.IsBusy = false;
        }
    }

    protected void ChildComponentStateHasChanged() =>
        StateHasChanged();

}


@inherits LayoutComponentBase
@implements IDisposable
@inject ISessionViewModel SessionViewModel
@inject IIntroductionSearchViewModel IntroductionSearchViewModel
@inject ILogger<MainLayoutComponent> Logger
@inject IJSRuntime JSRuntime
@*<div class="page">
        <div class="sidebar">
            <NavMenuComponent />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>*@

<header class="">
    <!-- Fixed navbar -->
    <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Recipe App</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav me-auto mb-2 mb-md-0">
                    <li class="nav-item">
                        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                            Home
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="Details">
                            New Recipe
                        </NavLink>
                    </li>
                </ul>
                @if (SessionViewModel.HostEnvironment.IsProduction().Equals(false))
                {
                    <div class="d-flex">
                        <SessionComponent />
                    </div>
                }
                <div class="d-flex">
                    <input class="form-control me-2"
                           type="search"
                           placeholder="Search"
                           aria-label="Search"
                           @bind-value="@(IntroductionSearchViewModel.IntroductionSearchRequestDto.SearchText)">
                    <button class="btn btn-outline-success"
                            type="button"
                            @onclick="@SearchAsync"
                            disabled="@(IntroductionSearchViewModel.IsBusy)">
                        Search
                    </button>
                    @*<button class="btn btn-outline-success"
                                type="button"
                                @onclick="@(() => SessionViewModel.TryInvokeAsync(
                                                async () => {
                                                    Logger.LogWarning("SearchButtonClicked");
                                                    SessionViewModel.NavigationManager.NavigateTo("/");
                                                    IntroductionSearchViewModel.SetBusyFlag(true);
                                                    await IntroductionSearchViewModel.SearchAsync(1, 10);
                                                    await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Search Results", $"Found {IntroductionSearchViewModel.IntroductionSearchResult.Meta.TotalItemCount} result(s)"));
                                                }
                                                , () => IntroductionSearchViewModel.SetBusyFlag(false)
                                                , IntroductionSearchViewModel.ApiResultMessages, ComponentName, "SearchButtonClicked"))"
                                disabled="@(IntroductionSearchViewModel.IsBusy)">
                            Search
                        </button>*@
                    @*<button class="btn btn-outline-success"
                                type="button"
                                @onclick="@SearchAsyncViaDelegates"
                                disabled="@(IntroductionSearchViewModel.IsBusy)">
                            Search
                        </button>*@
                </div>
            </div>
        </div>
    </nav>
</header>

<!-- Begin page content -->
<main class="mt-5"> @*flex-shrink-0 *@
    <div class="container" style="min-height: 90vh; margin-top: 60px;"> @*style="min-height: 85vh; margin-top: 60px;"*@
        @*<div class="row" style="margin-top: 60px;"></div>*@
        @Body
    </div>
</main>

@*<footer class="footer mt-auto py-3 bg-light" style="bottom:0; width:100%">*@
<footer class="footer mt-auto py-3 bg-light">
    <div class="container">
        <span class="text-muted">Place footer content here.</span>
    </div>
</footer>

@code {

    //protected string ComponentName = nameof(MainLayoutComponent);

    public void Dispose() =>
        IntroductionSearchViewModel.StateHasChangedEvent -= IntroductionSearchViewModel_StateHasChangedEvent;

    protected override async Task OnInitializedAsync()
    {
        IntroductionSearchViewModel.StateHasChangedEvent += IntroductionSearchViewModel_StateHasChangedEvent;

        await base.OnInitializedAsync();
    }

    protected void IntroductionSearchViewModel_StateHasChangedEvent(object sender, EventArgs e) =>
        StateHasChanged();

    protected async Task SearchAsync()
    {
        try
        {
            Logger.LogInformation(nameof(SearchAsync));

            IntroductionSearchViewModel.SetBusyFlag(true);
            await Task.Run(() => SessionViewModel.NavigationManager.NavigateTo("/"));
            //SessionViewModel.NavigationManager.NavigateTo("/");
            await IntroductionSearchViewModel.SearchAsync();
            await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Search Results", $"Found {IntroductionSearchViewModel.IntroductionSearchResult.Meta.TotalItemCount} result(s)"));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, IntroductionSearchViewModel.ApiResultMessages, this.ComponentName());
        }
        finally
        {
            IntroductionSearchViewModel.SetBusyFlag(false);
        }
    }

    protected async Task SearchAsyncViaDelegates()
    {
        const string methodName = nameof(SearchAsyncViaDelegates);

        await SessionViewModel.TryInvokeAsync(
            async () =>
            {
                Logger.LogWarning(methodName);
                await Task.Run(() => SessionViewModel.NavigationManager.NavigateTo("/"));
                //SessionViewModel.NavigationManager.NavigateTo("/");
                IntroductionSearchViewModel.SetBusyFlag(true);
                await IntroductionSearchViewModel.SearchAsync(1, 10);
                await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Search Results", $"Found {IntroductionSearchViewModel.IntroductionSearchResult.Meta.TotalItemCount} result(s)"));
            }
            , () => IntroductionSearchViewModel.SetBusyFlag(false)
            , IntroductionSearchViewModel.ApiResultMessages, this.ComponentName(), methodName);
    }

}
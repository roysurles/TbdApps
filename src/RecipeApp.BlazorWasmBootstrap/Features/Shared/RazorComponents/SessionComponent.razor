@*@implements IDisposable*@
@inject ISessionViewModel SessionViewModel
@inject IJSRuntime JSRuntime

<div class="d-inline-flex">
    <label style="color: whitesmoke">
        Environment:&nbsp;@(SessionViewModel.HostEnvironment.Environment)&nbsp;&nbsp;
    </label>
    <label class="mr-3"
           for="TraceIdTextBox"
           style="color: whitesmoke">
        Trace Id:&nbsp;&nbsp;
    </label>
    <input id="TraceIdTextBox"
           type="text"
           class="form-control form-control-sm mr-3"
           value="@(SessionViewModel.TraceId.ToString())"
           style="width: 300px;" />
    &nbsp;&nbsp;
    <button type="button"
            title="Copy to Clipboard"
            class="mr-3"
            onclick="let control = document.getElementById('TraceIdTextBox'); control.focus(); control.select(); document.execCommand('copy'); return false;">
        <i class="far fa-copy"></i>
    </button>
    <button type="button"
            title="Generate new Id"
            class="mr-3"
            @onclick="() => SessionViewModel.NewTraceId()">
        <i class="fa fa-file-o"></i>
    </button>
    &nbsp;&nbsp;
    <div class="form-check form-switch ml-3 mr-3" style="width: 100px">
        <input class="form-check-input " type="checkbox" role="switch" id="darkModeSwitch" @onchange="@DarkModeSwitchChangedAsync">
        <label class="form-check-label" for="flexSwitchCheckChecked" style="color: whitesmoke">Dark</label>
    </div>
</div>

@code {

    public void Dispose() =>
        SessionViewModel.StateHasChangedEvent -= SessionViewModel_StateHasChangedEvent;

    protected override async Task OnInitializedAsync()
    {
        SessionViewModel.StateHasChangedEvent += SessionViewModel_StateHasChangedEvent;

        base.OnInitialized();

        var theme = await JSRuntime.GetHtmlElementAttributeAsync(HtmlElementAttributesConstants.BootstrapColorTheme);
        if (string.Equals(theme, "dark"))
            await JSRuntime.SetAttributeAsync("darkModeSwitch", "checked", "");
    }

    protected async Task DarkModeSwitchChangedAsync(ChangeEventArgs args) =>
        await JSRuntime.SetHtmlElementAttributeAsync(HtmlElementAttributesConstants.BootstrapColorTheme, (bool)args.Value ? "dark" : "light");

    protected void SessionViewModel_StateHasChangedEvent(object sender, EventArgs e) =>
        StateHasChanged();

}

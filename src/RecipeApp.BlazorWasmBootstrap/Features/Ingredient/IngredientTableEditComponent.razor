@inject ISessionViewModel SessionViewModel
@inject IJSRuntime JSRuntime
@inject ILogger<IngredientTableEditComponent> Logger


@if (IngredientViewModel is not null)
{
    <div class="row">
        <ApiResultMessagesComponent ApiResultMessages="@IngredientViewModel.ApiResultMessages" />
    </div>

    <div class="row">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                title="Add Ingredient"
                                disabled="@(IngredientViewModel.IsIntroductionNew)"
                                @onclick="@AddIngredient">
                            <i class="fas fa-plus"></i>
                        </button>
                    </th>
                    <th scope="col">Measurement</th>
                    <th scope="col">Description</th>
                    <th scope="col">Reposition</th>
                    @*<th scope="col">SortOrder</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var item in IngredientViewModel.Ingredients)
                {

                    <tr>
                        <td>
                            <button type="button"
                                    class="btn btn-primary btn-sm ml-2"
                                    title="Save Ingredient"
                                    @onclick="@(() => SaveIngredientAsync(item))">
                                <i class="fas fa-save"></i>
                            </button>
                            <button type="button"
                                    class="btn btn-secondary btn-sm"
                                    title="Delete Ingredient"
                                    disabled="@(item.IsNew)"
                                    @onclick="@(() => DeleteIngredientAsync(item))">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                        <td>
                            <input type="text"
                                   class="form-control-sm w-100"
                                   @bind-value="@(item.Measurement)">
                        </td>
                        <td>
                            <input type="text"
                                   class="form-control-sm w-100"
                                   @bind-value="@(item.Description)">
                        </td>
                        <td class="align-middle">
                            <RepositionItemComponent Item="@item"
                                                     IsMoveFirstDisabled="@(item.IsNew || IngredientViewModel.IsBusy)"
                                                     IsMoveUpDisabled="@(item.IsNew || IngredientViewModel.IsBusy)"
                                                     IsMoveDownDisabled="@(item.IsNew || IngredientViewModel.IsBusy)"
                                                     IsMoveLastDisabled="@(item.IsNew || IngredientViewModel.IsBusy)"
                                                     OnMoveFirstClick="@((IngredientDto dto) => MoveIngredientAsync(dto, _ => IngredientViewModel.MoveIngredientFirstAsync(dto)))"
                                                     OnMoveUpClick="@((IngredientDto dto) => MoveIngredientAsync(dto, _ => IngredientViewModel.MoveIngredientUpAsync(dto)))"
                                                     OnMoveDownClick="@((IngredientDto dto) => MoveIngredientAsync(dto, _ => IngredientViewModel.MoveIngredientDownAsync(dto)))"
                                                     OnMoveLastClick="@((IngredientDto dto) => MoveIngredientAsync(dto, _ => IngredientViewModel.MoveIngredientLastAsync(dto)))" />
                        </td>
@*                        <td>
                            <input type="text"
                                   class="form-control-sm w-100"
                                   Value="@(item.SortOrder)">
                        </td>*@
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public IIngredientViewModel IngredientViewModel { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    protected string ComponentName = nameof(IngredientTableEditComponent);

    protected void AddIngredient()
    {
        try
        {
            Logger.LogInformation($"{nameof(AddIngredient)}()");

            IngredientViewModel.IsBusy = true;
            IngredientViewModel.AddIngredient();
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            IngredientViewModel.SetIsBusyFlag(false, () => OnStateHasChanged.InvokeAsync());
        }
    }

    protected async Task SaveIngredientAsync(IngredientDto ingredientDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(SaveIngredientAsync)}({nameof(ingredientDto)})");

            IngredientViewModel.IsBusy = true;
            await IngredientViewModel.SaveIngredientAsync(ingredientDto);
            var errorMessages = IngredientViewModel.ApiResultMessages.Where(m => m.MessageType == ApiResultMessageModelTypeEnumeration.Error);
            if (errorMessages.Any())
            {
                foreach (var errorMessage in errorMessages)
                    await JSRuntime.ToastAsync(new ToastModel(ToastType.error, "Ingredient", errorMessage.Message));

                return;
            }

            await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Saved successfully!"));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            await IngredientViewModel.SetIsBusyFlagAsync(false, OnStateHasChanged);
        }
    }

    protected async Task DeleteIngredientAsync(IngredientDto ingredientDto)
    {
        try
        {
            Logger.LogInformation($"{nameof(DeleteIngredientAsync)}({nameof(ingredientDto)})");

            IngredientViewModel.ClearApiResultMessages();

            if (await JSRuntime.ConfirmAsync($"Are you sure you want to delete this ingredient?") == false)
                return;

            IngredientViewModel.IsBusy = true;
            await IngredientViewModel.DeleteIngredientAsync(ingredientDto);
            var errorMessages = IngredientViewModel.ApiResultMessages.Where(m => m.MessageType == ApiResultMessageModelTypeEnumeration.Error);
            if (errorMessages.Any())
            {
                foreach (var errorMessage in errorMessages)
                    await JSRuntime.ToastAsync(new ToastModel(ToastType.error, "Ingredient", errorMessage.Message));

                return;
            }

            await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Deleted successfully!"));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            await IngredientViewModel.SetIsBusyFlagAsync(false, OnStateHasChanged);
        }
    }

    protected async Task MoveIngredientAsync(IngredientDto ingredientDto
        , Expression<Func<IngredientDto, Task<IIngredientViewModel>>> expression)
    {
        try
        {
            // https://stackoverflow.com/questions/1495465/get-name-of-action-func-delegate
            // https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/expression-trees-execution
            Logger.LogInformation("{MoveIngredientAsync}({ingredientDto}) for: {ActualMethodName}"
                , nameof(MoveIngredientAsync), nameof(ingredientDto), ((MethodCallExpression)expression.Body).Method.Name.ToString());

            IngredientViewModel.IsBusy = true;
            var func = expression.Compile();
            await func(ingredientDto);

            if (IngredientViewModel.ApiResultMessages.Any().Equals(false))
            {
                await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Moved successfully!"));
                return;
            }

            foreach (var apiResultMessage in IngredientViewModel.ApiResultMessages)
                await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Ingredient", apiResultMessage.Message));
        }
        catch (Exception ex)
        {
            SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
        }
        finally
        {
            await IngredientViewModel.SetIsBusyFlagAsync(false, OnStateHasChanged);
        }
    }

    // protected async Task MoveIngredientFirstAsync(IngredientDto ingredientDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveIngredientFirstAsync}({ingredientDto})", nameof(MoveIngredientFirstAsync), nameof(ingredientDto));

    //         IngredientViewModel.IsBusy = true;
    //         await IngredientViewModel.MoveIngredientFirstAsync(ingredientDto);

    //         if (IngredientViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in IngredientViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Ingredient", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         IngredientViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

    // protected async Task MoveIngredientUpAsync(IngredientDto ingredientDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveIngredientUpAsync}({ingredientDto})", nameof(MoveIngredientUpAsync), nameof(ingredientDto));

    //         IngredientViewModel.IsBusy = true;
    //         await IngredientViewModel.MoveIngredientUpAsync(ingredientDto);

    //         if (IngredientViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in IngredientViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Ingredient", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         IngredientViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

    // protected async Task MoveIngredientDownAsync(IngredientDto ingredientDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveIngredientDownAsync}({ingredientDto})", nameof(MoveIngredientDownAsync), nameof(ingredientDto));

    //         IngredientViewModel.IsBusy = true;
    //         await IngredientViewModel.MoveIngredientDownAsync(ingredientDto);

    //         if (IngredientViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in IngredientViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Ingredient", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         IngredientViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

    // protected async Task MoveIngredientLastAsync(IngredientDto ingredientDto)
    // {
    //     try
    //     {
    //         Logger.LogInformation("{MoveIngredientLastAsync}({ingredientDto})", nameof(MoveIngredientLastAsync), nameof(ingredientDto));

    //         IngredientViewModel.IsBusy = true;
    //         await IngredientViewModel.MoveIngredientLastAsync(ingredientDto);

    //         if (IngredientViewModel.ApiResultMessages.Any().Equals(false))
    //         {
    //             await JSRuntime.ToastAsync(new ToastModel(ToastType.info, "Ingredient", "Moved successfully!"));
    //             return;
    //         }

    //         foreach (var apiResultMessage in IngredientViewModel.ApiResultMessages)
    //             await JSRuntime.ToastAsync(new ToastModel(apiResultMessage.MessageType, "Ingredient", apiResultMessage.Message));
    //     }
    //     catch (Exception ex)
    //     {
    //         SessionViewModel.HandleException(ex, IngredientViewModel.ApiResultMessages, ComponentName);
    //     }
    //     finally
    //     {
    //         IngredientViewModel.IsBusy = false;
    //         await OnStateHasChanged.InvokeAsync();
    //     }
    // }

}
